##################################
# Application / App / Microservice
##################################
application:
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
  applicationName: review

  # Deployment
  deployment:
    reloadOnChange: true
    annotations:
      secret.reloader.stakater.com/reload: review-mongodb-creds
    fluentdConfigAnnotations:
      notifications:
        slack:
          webhookURL: # place the Slack Webhook URL here
          channelName: "#nordmart-gabbar-application-alerts"
        key: "level"
        pattern: "(ERROR|ERR|error|E[A-Z0-9]{4})"
    additionalLabels:
      appCategory: backend
    imagePullSecrets: nexus-docker-config-forked
    env:
      MONGODB_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: review-mongodb-creds
            key: mongodb-root-password
    envFrom:
      review-config:
        type: configmap
        nameSuffix: config

# #Binding Persistent Volume
#     volumes:
#       tmp:
#         persistentVolumeClaim:
#           claimName: review
# #Define the MOunt Path
#     volumeMounts:
#       tmp:
#         mountPath: /data

    resources:
      limits:
        memory: 1Gi
        cpu: 0.6
      requests:
        memory: 128Mi
        cpu: 0.1

    readinessProbe:
      enabled: true
      failureThreshold: 50
      periodSeconds: 50
      successThreshold: 1
      timeoutSeconds: 50
      initialDelaySeconds: 150
      httpGet:
        path: /actuator/health
        port: 8080

    livenessProbe:
      enabled: true
      failureThreshold: 50
      periodSeconds: 50
      successThreshold: 1
      timeoutSeconds: 50
      initialDelaySeconds: 150
      httpGet:
        path: /actuator/health
        port: 8080

    ports:
    - containerPort: 8080
      name: http
      protocol: TCP

# #Persistent Volume Claim
#   persistence:
#     enabled: false
#     mountPVC: false
#     mountPath: "/data"
#     name: "review"
#     accessMode: ReadWriteOnce
#     storageClass: ""
#     storageSize: 5Gi
#     volumeMode: "Filesystem"
#     volumeName: ""

## Service
  service:
    enabled: true
    ports:
    - name: http
      port: 8080
      targetPort: 8080

## Route
  route:
    enabled: true
    port:
      targetPort: http

# Ingress
  ingress:
    enabled: false
    servicePort: http
    hosts:
      - host:  review.<CLUSTER-NAME>.kubeapp.cloud
        paths:
        - path: /
          servicePort: 'http'
    tls:
    - {}

  ## Prometheus Rule to trigger alerts based on ratings
  prometheusRule:
    enabled: true
    additionalLabels:
      prometheus: stakater-workload-monitoring
    groups:
      - name: nordmart-review-low-rating-warning
        rules:
          - alert: NordmartReviewLowRatingsCritical
            annotations:
              message: >-
                Total ratings below 2 has crossed the threshold 1. Total reviews: {{ $value }}.
            expr: >
              sum by (namespace) (nordmart_review_ratings_total{rating="2"} or nordmart_review_ratings_total{rating="1"}) > 1
            labels:
              severity: critical
      - name: nordmart-review-api-rules
        rules:
          - alert: NordmartReviewApiNotAvailable
            annotations:
              message: 'Nordmart Review API in namespace chelsea-dev is not available for the last 1 minutes.'
            expr: (1 - absent(kube_pod_status_ready{condition="true",namespace="chelsea-dev"} * 
             on(pod) group_left(label_app) 
             kube_pod_labels{label_app="review",namespace="chelsea-dev"})) == 0
            for: 1m
            labels:
              severity: critical


  alertmanagerConfig:
    enabled: true
    selectionLabels:
      alertmanagerConfig: workload
    spec:
      receivers:
        - name: nordmart-review-receiver
          slackConfigs:
            - apiURL:
                key: api_url
                name: review-slack-webhook
              channel: '#ratings-alert'
              sendResolved: true
              text: |2-
                {{ range .Alerts }}
                *Alert:* `{{ .Labels.severity | toUpper }}` - {{ .Annotations.summary }}
                *Description:* {{ .Annotations.description }}
                *Details:*
                  {{ range .Labels.SortedPairs }} *{{ .Name }}:* `{{ .Value }}`
                  {{ end }}
                {{ end }}
              title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] SAAP Alertmanager Event Notification'
              httpConfig:
                tlsConfig:
                  insecureSkipVerify: true
      route:
        groupBy:
          - alertname
          - severity
        groupInterval: 3m
        groupWait: 30s
        repeatInterval: 1h
        matchers:
          - name: alertname
            value: NordmartReviewLowRatingsCritical
          - name: alertname
            value: NordmartReviewApiNotAvailable
        receiver: nordmart-review-receiver

  ## ConfigMap
  configMap:
    enabled: true
    files:
      config:
        DB_NAME: "nordmartDB"
        MONGO_HOST: "review-mongodb"

  ## RBAC
  rbac:
    serviceAccount:
      enabled: true

  ## Service Monitor
  serviceMonitor:
    enabled: true
    endpoints:
    - interval: 5s
      path: /actuator/prometheus # path where your metrics are exposed
      port: http

  ## Endpoint Montior
  endpointMonitor:
    enabled: true
    # add uptime robot additional config
    additionalConfig:
      uptimeRobotConfig:
        alertContacts: "3514554"
        keywordExists: 'yes'
        keywordValue: '404'
        monitorType: keyword

  externalSecret:
    enabled: true

  #SecretStore defines which SecretStore to use when fetching the secret data
    secretStore:
      name: tenant-vault-secret-store
      kind: SecretStore # or ClusterSecretStore

  #RefreshInterval is the amount of time before the values reading again from the SecretStore provider
    refreshInterval: "1m"
    files:
      mongodb-creds:
      #Used to fetch all properties from the Provider key
        dataFrom:
          key: chelsea/kv/review-mongodb-creds

  pdb:
    enabled: false
    minAvailable: 2
    maxUnavailable: 2

  networkPolicy:
    enabled: false
    podSelector:
      matchLabels:
        app.kubernetes.io/name: mongodb
    ingress:
      - ports:
          - protocol: TCP
            port: 27017
        from:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: review


#####################
# MongoDB dependency
#####################
mongodb:

  fullnameOverride: review-mongodb

  updateStrategy:
    type: Recreate

  resources:
    limits:
      memory: 1Gi
      cpu: 0.5
    requests:
      memory: 128Mi
      cpu: 0.1

  auth:
    enabled: true
    # Its created via an external secret from vault; defined above
    existingSecret: review-mongodb-creds

  podSecurityContext:
    enabled: false

  containerSecurityContext:
    enabled: false

#####################
# Grafana dashboard
#####################
grafanaDashboard:
  enabled: true

